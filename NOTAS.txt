Usamos Falconi, habria que considerar Flask y/o Bottle?
Que pasa con async? (uvicorn etc). Podria ser interesante para responder a querys muy largas o para paginar
Deberiamos tener mas estructura? Como minimo .middleware y .resources?
ORMs are basically not intended for high-performance bulk inserts ... asi que
esta la duda de si usar psycopg directametne o sqlalchemy con core o peewee
Una alternativa a gunicorn seria quizas el pywsgi de gevent, vease https://stackoverflow.com/questions/37119047/how-to-use-gevents-with-falcon
Una alternativa a peewee podria ser usar directamente dataset, https://dataset.readthedocs.io/en/latest/index.html 
aunque esta construido sobre sqlAlchemy. Por otro lado, curiosamente peewee soporta cierta integracion con dataset (?)
Marsmallow es interesante porque permite verificar las entradas y generar codigo de swagger mas... bueno, mas verboso aun.
Pero para una API experimental no viene mucho al caso.
#Si queremos un validador de la query string quizas se podria usar webargs
#from webargs import fields  #https://webargs.readthedocs.io/en/latest/framework_support.html#falcon
#from webargs.falconparser import use_args
fuera de produccion, una mejora de velocidad es acordarse de poner la tabla de lineas a unlogged
y quizas considerar el modulo timescale de postgres
ademas de filtrar datos, a veces hay que pasarlos a utf8: iconv -f cp852 -t utf-8 Datos_Hackaton_V1.csv -o Datos_Hackaton_V1_utf8.csv etc
y a veces hay que quitar el BOM
cat <(head -1 Acciones-HIST.csv | sed '1 s/\xEF\xBB\xBF//') <(head -100000 Acciones-PROD.csv | sed '1 s/\xEF\xBB\xBF//') | time curl -k -X POST "https://localhost/tabla/BiziWithCustSmall"  -H "accept: application/json" -H "Authorization: Basic ...." -H "Content-Type: multipart/form-data" -F "fileName=@-;type=text/csv" -F "geo=" -F "tiempo=DataTimeRemoval" -F "linea=" -F "ids=CustId" -F "ignore=DateTime Arrival"
>>> sha512("...........".encode("utf-8")).hexdigest()
